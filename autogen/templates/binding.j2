#include "pybind11/pybind11.h"
#include "pybind11/functional.h"
#include "engine/engine.h"

using namespace pybind11;

PYBIND11_MODULE(Engine, m) 
{
// ============================ ENUMS ============================
{% for enum in enums %}
enum_<::NTT_NS::{{ enum.name }}>(m, "{{ enum.name }}")
    {% for constant in enum.constants %}
    .value("{{ constant.name }}", ::NTT_NS::{{ enum.name }}::{{ constant.name }})
    {% endfor %}
    .export_values();
{% endfor %}
// ===============================================================

// ============================ STRUCTS ============================
{% for struct in structs %}
class_<::NTT_NS::{{ struct.name }}>(m, "{{ struct.name }}")
    .def(init<>())
    {% for attribute in struct.attributes %}
    .def_readwrite("{{ attribute.name }}", &::NTT_NS::{{ struct.name }}::{{ attribute.name }})
    {% endfor %}
    ;
{% endfor %}
// ===================================================================

// ============================ FUNCTIONS ============================
{% for function in functions %}
m.def("{{ function.name }}", &::NTT_NS::{{ function.name }}, "{{ function.comment }}");
{% endfor %}
// ===================================================================

// ============================ CLASSES ============================
{% for class in classes %}
class_<::NTT_NS::{{ class.name }}>(m, "{{ class.name }}")
    .def(init<>())
    {% for method in class.methods %}
    {% if method.is_static %}
    .def_static("{{ method.name }}", &::NTT_NS::{{ class.name }}::{{ method.name }}, "{{ method.comment }}")
    {% else %}
    .def("{{ method.name }}", &::NTT_NS::{{ class.name }}::{{ method.name }}, "{{ method.comment }}")
    {% endif %}
    {% endfor %}

    ;

{% endfor %}
// ===================================================================
}