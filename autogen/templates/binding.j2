#include "pybind11/pybind11.h"
#include "pybind11/functional.h"
#include "engine/engine.h"

using namespace pybind11;
using namespace ::NTT_NS;

PYBIND11_MODULE(Engine, m) 
{
// ============================ ENUMS ============================
{% for enum in enums %}
enum_<::NTT_NS::{{ enum.name }}>(m, "{{ enum.name }}")
    {% for constant in enum.constants %}
    .value("{{ constant.name }}", ::NTT_NS::{{ enum.name }}::{{ constant.name }})
    {% endfor %}
    .export_values();
{% endfor %}
// ===============================================================

// ============================ STRUCTS ============================
{% for struct in structs %}
    {% if "python" in struct.annotations %}
class_<::NTT_NS::{{ struct.name }}>(m, "{{ struct.name }}")
    .def(init<>())
        {% for attribute in struct.attributes %}
    .def_readwrite("{{ attribute.name }}", &::NTT_NS::{{ struct.name }}::{{ attribute.name }})
        {% endfor %}
    ;
    {% endif %}
{% endfor %}
// ===================================================================

// ============================ FUNCTIONS ============================
{% for function in functions %}
m.def("{{ function.name }}", &::NTT_NS::{{ function.name }}, "{{ function.comment }}");
{% endfor %}
// ===================================================================

// ============================ CLASSES ============================
{% for class in classes %}
    {% if "python" in class.annotations %}
class_<::NTT_NS::{{ class.name }}>(m, "{{ class.name }}")
        {% if "singleton" in class.annotations %}
            {% for method in class.methods %}
                {% if "python" in method.annotations %}
    .def_static("{{ method.name}}", [](
                    {% for argument in method.arguments %}
            {{ argument.type }} {{ argument.name }}
                        {% if not loop.last %},{% endif %}
                    {% endfor %}
    ) -> {{ method.returnType }}
    {
        return ::NTT_NS::{{ class.name }}::GetInstance()->{{ method.name }}(
                    {% for argument in method.arguments %}
            {{ argument.name }}
                        {% if not loop.last %},{% endif %}
                    {% endfor %}
        );
    }, "{{ method.comment }}")
                {% endif %}
            {% endfor %}
        {% else %}
            {% if class.hasDefaultConstructor %}
    .def(init<>())
            {% endif %}
            {% for constructor in class.constructors %}
    .def(init<
            {% for argument in constructor.arguments %}
                {{argument.type}}
                {% if not loop.last %},{% endif %}
            {% endfor %}
    >())
            {% endfor %}
            {% for method in class.methods %}
                {% if "python" in method.annotations %}
                    {% if method.is_static %}
        .def_static("{{ method.name }}", &::NTT_NS::{{ class.name }}::{{ method.name }}, "{{ method.comment }}")
                    {% else %}
        .def("{{ method.name }}", &::NTT_NS::{{ class.name }}::{{ method.name }}, "{{ method.comment }}")
                    {% endif %}
                {% endif %}
            {% endfor %}
        {% endif %}
        ;
    {%endif%}
{% endfor %}
// ===================================================================
}