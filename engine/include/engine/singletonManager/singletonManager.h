#pragma once

#include "engine/common/common.h"

namespace NTT_NS
{
    /**
     * @brief The callback which will be called when the application is shutting down, this
     *      callback will be managed completely by the `SingletonManager` module which the
     *      singleton object just be needed to register the callback to the `SingletonManager` module.
     */
    typedef void (*SingletonDestroyCallback)(void *instance);

    /**
     * @brief This manager contains only static methods which is used for managing all singleton instances inside this engine.
     *
     * The singleton object used the lazy initialization pattern, whereas when a singleton object is required, that
     *      object will actively (via macro) created the instance and then register the instance to the `SingletonManager` module.
     */
    class SingletonManager
    {
    public:
        /**
         * @brief The static method which must be called at the beginning of the application.
         *
         * This method will do some pre-loading, ... at the starting for the next steps.
         */
        static void Initialize();

        /**
         * @brief The static method which must be called at the end of the application.
         *
         * This method will do some post-loading, ... at the ending for the next steps.
         */
        static void Finalize();

        /**
         * @brief Register a singleton instance to the `SingletonManager` module.
         *
         * @param instance The casted pointer of the singleton object.
         * @param callback The callback which will be called when the application is shutting down.
         *
         * @note the `callback` is auto generated by the macros.
         */
        static void RegisterSingleton(void *instance, SingletonDestroyCallback callback);

    private:
        /**
         * @brief Storing all the pointers to the initialized singleton objects.
         *
         * @note The index of this vector is relative to the `s_destroyCallbacks` vector.
         */
        static vector<void *> s_instances;

        /**
         * @brief Storing all the callbacks which will be called when the application is shutting down.
         *
         * @note The index of this vector is relative to the `s_instances` vector.
         */
        static vector<SingletonDestroyCallback> s_destroyCallbacks;
    };
} // namespace NTT_NS
